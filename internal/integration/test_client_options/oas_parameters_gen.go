// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/istforks/ogen/conv"
	"github.com/istforks/ogen/middleware"
	"github.com/istforks/ogen/ogenerrors"
	"github.com/istforks/ogen/uri"
)

// FooParams is parameters of Foo operation.
type FooParams struct {
	Body string
}

func unpackFooParams(packed middleware.Parameters) (params FooParams) {
	{
		key := middleware.ParameterKey{
			Name: "body",
			In:   "query",
		}
		params.Body = packed[key].(string)
	}
	return params
}

func decodeFooParams(args [0]string, argsEscaped bool, r *http.Request) (params FooParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: body.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "body",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Body = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "body",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
